# Generated by Django 3.0.6 on 2020-06-05 12:46

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AlgorithmInstance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('current_validation', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='currentValidationJSON', null=True)),
                ('progress_percentage', models.IntegerField(blank=True, db_column='progressPercentage', null=True)),
                ('validation_history', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='validationHistoryJSON', null=True)),
                ('creation_date', models.DateTimeField(blank=True, db_column='creationDate', null=True)),
                ('training_log', models.CharField(blank=True, db_column='trainingLog', max_length=255, null=True)),
            ],
            options={
                'db_table': 'AlgorithmInstances',
            },
        ),
        migrations.CreateModel(
            name='AlgorithmInstanceObjectModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_instance', models.ForeignKey(db_column='algorithmInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmInstance')),
            ],
            options={
                'db_table': 'AlgorithmInstanceObjectModel',
            },
        ),
        migrations.CreateModel(
            name='AlgorithmModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('preprocessor', models.CharField(blank=True, max_length=255, null=True)),
                ('postprocessor', models.CharField(blank=True, max_length=255, null=True)),
                ('payload', models.TextField(blank=True, null=True)),
                ('hyperparameter_structure', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='HyperparameterStructureJSON', null=True)),
                ('validation_structure', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='ValidationStructureJSON', null=True)),
                ('model_class', models.BooleanField(blank=True, db_column='class', null=True)),
                ('is_trainable', models.BooleanField(blank=True, db_column='isTrainable', null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'AlgorithmModels',
            },
        ),
        migrations.CreateModel(
            name='AnnotationInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('outsourced_meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='outsourcedMetaJSON', null=True)),
                ('SDG_two', models.BooleanField(blank=True, db_column='SDGtwo', null=True)),
                ('SDG_two_inst', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='SDGtwoInstJSON', null=True)),
            ],
            options={
                'db_table': 'AnnotationInstructions',
            },
        ),
        migrations.CreateModel(
            name='Architecture',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('payload', models.TextField(blank=True, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Architectures',
            },
        ),
        migrations.CreateModel(
            name='AugmentationInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('aug_operations', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='augOperationsJSON', null=True)),
            ],
            options={
                'db_table': 'AugmentationInstructions',
            },
        ),
        migrations.CreateModel(
            name='DataAcqInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('video_download', models.BooleanField(blank=True, db_column='videoDownload', null=True)),
                ('video_download_params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='videoDownloadParamsJSON', null=True)),
                ('real_data_params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='realDataParamsJSON', null=True)),
                ('SDG_one', models.BooleanField(blank=True, db_column='SDGone', null=True)),
                ('SDG_one_params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='SDGoneParamsJSON', null=True)),
            ],
            options={
                'db_table': 'DataAcqInstructions',
            },
        ),
        migrations.CreateModel(
            name='DataSplitInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadataJSON', null=True)),
            ],
            options={
                'db_table': 'DataSplitInstructions',
            },
        ),
        migrations.CreateModel(
            name='DeviceClass',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('docker_base', models.CharField(blank=True, db_column='dockerBase', max_length=255, null=True)),
            ],
            options={
                'db_table': 'DeviceClasses',
            },
        ),
        migrations.CreateModel(
            name='DeviceInstance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('serial', models.IntegerField(blank=True, null=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('device_class', models.ForeignKey(db_column='deviceClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceClass')),
            ],
            options={
                'db_table': 'DeviceInstances',
            },
        ),
        migrations.CreateModel(
            name='DeviceParameter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_sensor', models.BooleanField(blank=True, db_column='isSensor', null=True)),
                ('is_ECU', models.BooleanField(blank=True, db_column='isECU', null=True)),
                ('is_camera', models.BooleanField(blank=True, db_column='isCamera', null=True)),
                ('is_lidar', models.BooleanField(blank=True, db_column='isLidar', null=True)),
                ('is_illu', models.BooleanField(blank=True, db_column='isIllu', null=True)),
                ('is_thermal', models.BooleanField(blank=True, db_column='isThermal', null=True)),
                ('is_radar', models.BooleanField(blank=True, db_column='isRadar', null=True)),
                ('model_number', models.IntegerField(blank=True, db_column='modelNumber', null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.IntegerField(blank=True, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('DDP_fin', models.IntegerField(blank=True, db_column='DDPfin', null=True)),
                ('IP_code', models.CharField(blank=True, db_column='IPcode', max_length=255, null=True)),
                ('power_consumption', models.IntegerField(blank=True, db_column='powerConsumption', null=True)),
                ('device_size_x', models.IntegerField(blank=True, db_column='deviceSizeX', null=True)),
                ('device_size_y', models.IntegerField(blank=True, db_column='deviceSizeY', null=True)),
                ('device_size_z', models.IntegerField(blank=True, db_column='deviceSizeZ', null=True)),
                ('integrated_measures', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='integratedMeasuresJSON', null=True)),
                ('camera_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='cameraDataJSON', null=True)),
                ('ECU_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='ECUDataJSON', null=True)),
                ('lidar_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='lidarDataJSON', null=True)),
                ('illum_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='illumDataJSON', null=True)),
                ('thermal_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='thermalDataJSON', null=True)),
                ('radar_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='radarDataJSON', null=True)),
            ],
            options={
                'db_table': 'DeviceParameters',
            },
        ),
        migrations.CreateModel(
            name='DockerInstance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'DockerInstances',
            },
        ),
        migrations.CreateModel(
            name='DockerModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('docker_payload', models.TextField(blank=True, db_column='dockerPayload', null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'DockerModels',
            },
        ),
        migrations.CreateModel(
            name='Ecosystem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Ecosystems',
            },
        ),
        migrations.CreateModel(
            name='EcosystemsEdgeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ecosystem', models.ForeignKey(db_column='ecosystemId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Ecosystem')),
            ],
            options={
                'db_table': 'EcosystemsEdgeNodes',
            },
        ),
        migrations.CreateModel(
            name='EdgeNode',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('feature_models', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='featureModelsJSON', null=True)),
                ('feature_instances', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='featureInstancesJSON', null=True)),
                ('docker_instance', models.ForeignKey(db_column='dockerInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DockerInstance')),
                ('ecosystems', models.ManyToManyField(through='recon_db_manager.EcosystemsEdgeNode', to='recon_db_manager.Ecosystem')),
            ],
            options={
                'db_table': 'EdgeNodes',
            },
        ),
        migrations.CreateModel(
            name='FeatureInstance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('high_level_fidelity', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='highLevelFidelityJSON', null=True)),
                ('total_comp_time', models.IntegerField(blank=True, db_column='totalCompTime', null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'FeatureInstances',
            },
        ),
        migrations.CreateModel(
            name='FeatureModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('alg_class_sequence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='algClassSequenceJSON', null=True)),
                ('input_device_class_reqs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='inputDeviceClassReqsJSON', null=True)),
                ('input_device_param_reqs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='inputDeviceParamReqsJSON', null=True)),
                ('high_level_reqs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='highLevelReqsJSON', null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'FeatureModels',
            },
        ),
        migrations.CreateModel(
            name='FileStorage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file_type', models.CharField(blank=True, db_column='fileType', max_length=3, null=True)),
                ('link', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'FileStorage',
            },
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('frame_file', models.CharField(blank=True, db_column='frameFile', max_length=255, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('is_validation', models.BooleanField(blank=True, db_column='isValidation', null=True)),
            ],
            options={
                'db_table': 'Frames',
            },
        ),
        migrations.CreateModel(
            name='FrameDataset',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_continuous', models.BooleanField(blank=True, db_column='isContinuous', null=True)),
                ('time_start', models.IntegerField(blank=True, db_column='timeStart', null=True)),
                ('time_end', models.IntegerField(blank=True, db_column='timeEnd', null=True)),
                ('is_labeled', models.BooleanField(blank=True, db_column='isLabeled', null=True)),
                ('VDL_is_downloaded', models.BooleanField(blank=True, db_column='VDLisDownloaded', null=True)),
                ('VDL_address', models.CharField(blank=True, db_column='VDLaddress', max_length=255, null=True)),
                ('VDL_timestamp_found', models.DateTimeField(blank=True, db_column='VDLtimestampFound', null=True)),
                ('aug_metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='augMetadataJSON', null=True)),
                ('data_acq_instruction', models.ForeignKey(db_column='DataAcqInstructionsId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DataAcqInstruction')),
            ],
            options={
                'db_table': 'FrameDatasets',
            },
        ),
        migrations.CreateModel(
            name='LabelClass',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('class_name', models.CharField(blank=True, db_column='className', max_length=255, null=True)),
                ('class_description', models.TextField(blank=True, db_column='classDescription', null=True)),
                ('UI_tool', models.CharField(blank=True, db_column='UItool', max_length=255, null=True)),
                ('conflict_definition', models.CharField(blank=True, db_column='conflictDefinition', max_length=255, null=True)),
                ('is_conflict_arg', models.BooleanField(blank=True, db_column='isConflictArg', null=True)),
                ('is_argument', models.BooleanField(blank=True, db_column='isArgument', null=True)),
                ('argument_type', models.CharField(blank=True, db_column='argumentType', max_length=255, null=True)),
                ('json_structure', models.CharField(blank=True, db_column='jsonStructure', max_length=255, null=True)),
            ],
            options={
                'db_table': 'LabelClasses',
            },
        ),
        migrations.CreateModel(
            name='LabelDataset',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label_name', models.CharField(blank=True, db_column='labelName', max_length=255, null=True)),
                ('label_description', models.TextField(blank=True, db_column='labelDescription', null=True)),
                ('label_class', models.ForeignKey(db_column='labelClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.LabelClass')),
                ('parent_algorithm_model', models.ForeignKey(db_column='parentAlgorithmModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmModel')),
                ('parent_frame_dataset', models.ForeignKey(db_column='parentFrameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset')),
            ],
            options={
                'db_table': 'LabelDatasets',
            },
        ),
        migrations.CreateModel(
            name='ObjectModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('object_file', models.CharField(blank=True, db_column='objectFile', max_length=255, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('algorithm_instances', models.ManyToManyField(through='recon_db_manager.AlgorithmInstanceObjectModel', to='recon_db_manager.AlgorithmInstance')),
            ],
            options={
                'db_table': 'ObjectModels',
            },
        ),
        migrations.CreateModel(
            name='OperationClass',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('class_name', models.CharField(blank=True, db_column='className', max_length=255, null=True)),
                ('arg_names', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='argNamesJSON', null=True)),
                ('arg_types', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='argTypesJSON', null=True)),
                ('frame_payload', models.TextField(blank=True, db_column='framePayload', null=True)),
                ('label_payload', models.TextField(blank=True, db_column='labelPayload', null=True)),
            ],
            options={
                'db_table': 'OperationClasses',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('vat', models.CharField(blank=True, db_column='VAT', max_length=255, null=True)),
                ('main_firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('main_lastname', models.CharField(blank=True, max_length=255, null=True)),
                ('main_address', models.CharField(blank=True, max_length=255, null=True)),
                ('main_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('main_email', models.CharField(blank=True, max_length=255, null=True)),
                ('inv_firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('inv_lastname', models.CharField(blank=True, max_length=255, null=True)),
                ('inv_address', models.CharField(blank=True, max_length=255, null=True)),
                ('inv_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('inv_email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('decription', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('settings', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='settingsJSON', null=True)),
                ('ecosystem', models.ForeignKey(db_column='ecosystemId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Ecosystem')),
                ('featuremodel', models.ForeignKey(db_column='featuremodelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureModel')),
                ('organization', models.ForeignKey(db_column='organizationId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Organization')),
            ],
            options={
                'db_table': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='QualityMetricStruct',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('payload', models.TextField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'QualityMetricStruct',
            },
        ),
        migrations.CreateModel(
            name='TrainingInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('hyperparameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='hyperparametersJSON', null=True)),
                ('data_split_inst', models.ForeignKey(db_column='dataSplitInst', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DataSplitInstruction')),
            ],
            options={
                'db_table': 'TrainingInstructions',
            },
        ),
        migrations.CreateModel(
            name='TypeCode',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(blank=True, db_column='typeName', max_length=255, null=True)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('value', models.CharField(blank=True, max_length=3, null=True)),
                ('short_description', models.TextField(blank=True, db_column='shortDescription', null=True)),
                ('long_description', models.TextField(blank=True, db_column='longDescription', null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_by', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'TypeCode',
            },
        ),
        migrations.CreateModel(
            name='ValidationInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadataJSON', null=True)),
            ],
            options={
                'db_table': 'ValidationInstructions',
            },
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('payload', models.TextField(blank=True, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Weights',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('associated_HIT_sets', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='associatedHITsetsJSON', null=True)),
                ('t_one_assignments_done', models.IntegerField(blank=True, db_column='tOneAssignmentsDone', null=True)),
                ('t_one_rating', models.DecimalField(blank=True, db_column='tOneRating', decimal_places=2, max_digits=16, null=True)),
                ('t_two_assignments_done', models.IntegerField(blank=True, db_column='tTwoAssignmentsDone', null=True)),
                ('t_two_rating', models.IntegerField(blank=True, db_column='tTwoRating', null=True)),
            ],
            options={
                'db_table': 'Workers',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('time_created', models.DateTimeField(blank=True, null=True)),
                ('firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('lastname', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('user_level', models.CharField(blank=True, max_length=255, null=True)),
                ('organization', models.ForeignKey(db_column='organizationId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Organization')),
            ],
            options={
                'db_table': 'Users',
            },
        ),
        migrations.CreateModel(
            name='TrainingInstructionsLabelDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_dataset', models.ForeignKey(db_column='labelDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.LabelDataset')),
                ('training_inst', models.ForeignKey(db_column='TrainingInstId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.TrainingInstruction')),
            ],
            options={
                'db_table': 'TrainingInstructionsLabelDatasets',
            },
        ),
        migrations.CreateModel(
            name='RoadConditions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
            ],
            options={
                'db_table': 'RoadConditions',
            },
        ),
        migrations.CreateModel(
            name='RelevantData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sensor_GPS_lat', models.DecimalField(blank=True, db_column='sensorGpsLat', decimal_places=2, max_digits=16, null=True)),
                ('sensor_GPS_long', models.DecimalField(blank=True, db_column='sensorGpsLong', decimal_places=2, max_digits=16, null=True)),
                ('rel_data_type', models.CharField(blank=True, db_column='relDataType', max_length=255, null=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('location_x', models.DecimalField(blank=True, db_column='locationX', decimal_places=2, max_digits=16, null=True)),
                ('location_y', models.DecimalField(blank=True, db_column='locationY', decimal_places=2, max_digits=16, null=True)),
                ('location_z', models.DecimalField(blank=True, db_column='locationZ', decimal_places=2, max_digits=16, null=True)),
                ('orient_theta', models.DecimalField(blank=True, db_column='orientTheta', decimal_places=2, max_digits=16, null=True)),
                ('orient_phi', models.DecimalField(blank=True, db_column='orientPhi', decimal_places=2, max_digits=16, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('is_tagged_data', models.BooleanField(blank=True, db_column='isTaggedData', null=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('device_instance', models.ForeignKey(db_column='deviceInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceInstance')),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
                ('feature_model', models.ForeignKey(db_column='featureModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureModel')),
                ('object_model', models.ForeignKey(db_column='objectModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.ObjectModel')),
                ('project', models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project')),
                ('tagged_data', models.ForeignKey(db_column='taggedDataId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset')),
            ],
            options={
                'db_table': 'RelevantData',
            },
        ),
        migrations.CreateModel(
            name='QuestionXML',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('answer_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='answerFieldsJSON', null=True)),
                ('example_frames', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='exampleFramesJSON', null=True)),
                ('t_one_direct_payload', models.TextField(blank=True, db_column='tOneDirectPayload', null=True)),
                ('t_two_direct_payload', models.TextField(blank=True, db_column='tTwoDirectPayload', null=True)),
                ('creation_time', models.DateTimeField(blank=True, db_column='creationTime', null=True)),
                ('question_title', models.CharField(blank=True, db_column='questionTitle', max_length=255, null=True)),
                ('question_description', models.TextField(blank=True, db_column='questionDescription', null=True)),
                ('question_inst_text', models.CharField(blank=True, db_column='questionInstText', max_length=255, null=True)),
                ('label_class_arg', models.CharField(blank=True, db_column='labelClassArg', max_length=255, null=True)),
                ('label_class_conf_arg', models.CharField(blank=True, db_column='labelClassConfArg', max_length=255, null=True)),
                ('label_class', models.ForeignKey(db_column='labelClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.LabelClass')),
            ],
            options={
                'db_table': 'QuestionXMLs',
            },
        ),
        migrations.CreateModel(
            name='ProjectInstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('annot_inst', models.ForeignKey(db_column='annotInstId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AnnotationInstruction')),
                ('augment_inst', models.ForeignKey(db_column='augmentInstId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AugmentationInstruction')),
                ('data_acq_inst', models.ForeignKey(db_column='dataAcqInstId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DataAcqInstruction')),
                ('project', models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project')),
                ('training_inst', models.ForeignKey(db_column='trainingInstrId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.TrainingInstruction')),
                ('validation_inst', models.ForeignKey(db_column='validationInstrId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.ValidationInstruction')),
            ],
            options={
                'db_table': 'ProjectInstructions',
            },
        ),
        migrations.CreateModel(
            name='ProjectEdgeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
                ('project', models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project')),
            ],
            options={
                'db_table': 'ProjectEdgeNodes',
            },
        ),
        migrations.CreateModel(
            name='OutsourcedInst',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('label_name', models.CharField(blank=True, db_column='labelName', max_length=255, null=True)),
                ('label_description', models.TextField(blank=True, db_column='labelDescription', null=True)),
                ('HIT_set_name', models.CharField(blank=True, db_column='HITsetName', max_length=255, null=True)),
                ('HIT_set_description', models.TextField(blank=True, db_column='HITsetDescription', null=True)),
                ('t_one_metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tOneMetadataJSON', null=True)),
                ('t_two_metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tTwoMetadataJSON', null=True)),
                ('annot_inst', models.ForeignKey(db_column='annotInstId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AnnotationInstruction')),
                ('frame_dataset', models.ForeignKey(db_column='frameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset')),
                ('question_XML', models.ForeignKey(db_column='questionXMLid', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.QuestionXML')),
            ],
            options={
                'db_table': 'OutsourcedInst',
            },
        ),
        migrations.CreateModel(
            name='OperationInstance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('ignore_OoB', models.BooleanField(blank=True, db_column='ignoreOoB', null=True)),
                ('fill_type', models.CharField(blank=True, db_column='fillType', max_length=255, null=True)),
                ('frame_dataset', models.ForeignKey(db_column='frameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset')),
                ('operation_class', models.ForeignKey(db_column='operationClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.OperationClass')),
            ],
            options={
                'db_table': 'OperationInstances',
            },
        ),
        migrations.CreateModel(
            name='OperationClassesSupportedLabelClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_class', models.ForeignKey(db_column='labelClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.LabelClass')),
                ('operation_class', models.ForeignKey(db_column='operationClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.OperationClass')),
            ],
            options={
                'db_table': 'OperationClassesSupportedLabelClasses',
            },
        ),
        migrations.AddField(
            model_name='operationclass',
            name='label_classes',
            field=models.ManyToManyField(through='recon_db_manager.OperationClassesSupportedLabelClass', to='recon_db_manager.LabelClass'),
        ),
        migrations.CreateModel(
            name='ObjectModelProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_model', models.ForeignKey(db_column='objectModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.ObjectModel')),
                ('project', models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project')),
            ],
            options={
                'db_table': 'ObjectModelProject',
            },
        ),
        migrations.CreateModel(
            name='ObjectModelFeatureModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_model', models.ForeignKey(db_column='featureModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureModel')),
                ('object_model', models.ForeignKey(db_column='objectModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.ObjectModel')),
            ],
            options={
                'db_table': 'ObjectModelFeatureModel',
            },
        ),
        migrations.CreateModel(
            name='ObjectModelAlgorithmModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_model', models.ForeignKey(db_column='algorithmModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmModel')),
                ('object_model', models.ForeignKey(db_column='objectModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.ObjectModel')),
            ],
            options={
                'db_table': 'ObjectModelAlgorithmModel',
            },
        ),
        migrations.AddField(
            model_name='objectmodel',
            name='algorithm_models',
            field=models.ManyToManyField(through='recon_db_manager.ObjectModelAlgorithmModel', to='recon_db_manager.AlgorithmModel'),
        ),
        migrations.AddField(
            model_name='objectmodel',
            name='feature_models',
            field=models.ManyToManyField(through='recon_db_manager.ObjectModelFeatureModel', to='recon_db_manager.FeatureModel'),
        ),
        migrations.AddField(
            model_name='objectmodel',
            name='projects',
            field=models.ManyToManyField(through='recon_db_manager.ObjectModelProject', to='recon_db_manager.Project'),
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.IntegerField(blank=True, null=True)),
                ('price', models.CharField(blank=True, max_length=255, null=True)),
                ('next_payment', models.DateTimeField(blank=True, db_column='nextPayment', null=True)),
                ('purchase_date', models.DateTimeField(blank=True, db_column='purchaseDate', null=True)),
                ('termination_date', models.DateTimeField(blank=True, db_column='terminationDate', null=True)),
                ('user', models.ForeignKey(db_column='userId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.User')),
            ],
            options={
                'db_table': 'Licenses',
            },
        ),
        migrations.AddField(
            model_name='labeldataset',
            name='training_instructions',
            field=models.ManyToManyField(through='recon_db_manager.TrainingInstructionsLabelDataset', to='recon_db_manager.TrainingInstruction'),
        ),
        migrations.CreateModel(
            name='LabelData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('data_proper', models.IntegerField(blank=True, db_column='dataProper', null=True)),
                ('is_void', models.BooleanField(blank=True, db_column='isVoid', null=True)),
                ('t_one_HIT_id', models.CharField(blank=True, db_column='tOneHITid', max_length=255, null=True)),
                ('t_two_HIT_id', models.CharField(blank=True, db_column='tTwoHITid', max_length=255, null=True)),
                ('label_dataset', models.ForeignKey(db_column='labelDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.LabelDataset')),
                ('parent_frame', models.ForeignKey(db_column='parentFrame', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Frame')),
            ],
            options={
                'db_table': 'LabelData',
            },
        ),
        migrations.CreateModel(
            name='HITset',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('t_one_worker_blacklist', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tOneWorkerBlacklistJSON', null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('label_name', models.CharField(blank=True, db_column='labelName', max_length=255, null=True)),
                ('label_description', models.TextField(blank=True, db_column='labelDescription', null=True)),
                ('label_class', models.IntegerField(blank=True, db_column='labelClass', null=True)),
                ('dataset_name', models.CharField(blank=True, db_column='datasetName', max_length=255, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('time_remaining', models.TimeField(blank=True, db_column='timeRemaining', null=True)),
                ('HIT_percentage', models.IntegerField(blank=True, db_column='HITpercentage', null=True)),
                ('succeeded', models.BooleanField(blank=True, null=True)),
                ('t_one_total_duration', models.IntegerField(blank=True, db_column='tOneTotalDuration', null=True)),
                ('t_one_total_cost', models.CharField(blank=True, db_column='tOneTotalCost', max_length=255, null=True)),
                ('t_two_total_duration', models.IntegerField(blank=True, db_column='tTwoTotalDuration', null=True)),
                ('t_two_total_cost', models.CharField(blank=True, db_column='tTwoTotalCost', max_length=255, null=True)),
                ('total_duration', models.IntegerField(blank=True, db_column='totalDuration', null=True)),
                ('total_cost', models.CharField(blank=True, db_column='totalCost', max_length=255, null=True)),
                ('t_one_metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tOneMetadataJSON', null=True)),
                ('t_two_metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tTwoMetadataJSON', null=True)),
                ('assoc_labelset', models.ForeignKey(db_column='assocLabelsetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.LabelDataset')),
                ('dataset', models.ForeignKey(db_column='frameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset')),
                ('question_XML', models.ForeignKey(db_column='questionXMLid', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.QuestionXML')),
            ],
            options={
                'db_table': 'HITsets',
            },
        ),
        migrations.CreateModel(
            name='FrameDatasetsProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_dataset', models.ForeignKey(db_column='frameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset')),
                ('project', models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project')),
            ],
            options={
                'db_table': 'FrameDatasetsProjects',
            },
        ),
        migrations.AddField(
            model_name='framedataset',
            name='projects',
            field=models.ManyToManyField(through='recon_db_manager.FrameDatasetsProject', to='recon_db_manager.Project'),
        ),
        migrations.AddField(
            model_name='frame',
            name='frame_dataset',
            field=models.ForeignKey(db_column='frameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset'),
        ),
        migrations.CreateModel(
            name='FeatureModelAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_model', models.ForeignKey(db_column='algorithmModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmModel')),
                ('feature_model', models.ForeignKey(db_column='featureModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureModel')),
            ],
            options={
                'db_table': 'FeatureModelAlgorithm',
            },
        ),
        migrations.CreateModel(
            name='FeatureInstanceAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm', models.ForeignKey(db_column='algorithmId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmInstance')),
                ('feature_instance', models.ForeignKey(db_column='featureInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureInstance')),
            ],
            options={
                'db_table': 'FeatureInstanceAlgorithm',
            },
        ),
        migrations.AddField(
            model_name='featureinstance',
            name='feature_model',
            field=models.ForeignKey(db_column='featureModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureModel'),
        ),
        migrations.AddField(
            model_name='featureinstance',
            name='parent_ECU_class',
            field=models.ForeignKey(db_column='parentECUclass', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceClass'),
        ),
        migrations.AddField(
            model_name='featureinstance',
            name='project',
            field=models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project'),
        ),
        migrations.CreateModel(
            name='EventsHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('event_type', models.CharField(blank=True, db_column='eventType', max_length=3, null=True)),
                ('verification_result', models.CharField(blank=True, db_column='verificationResult', max_length=3, null=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
            ],
            options={
                'db_table': 'EventsHistory',
            },
        ),
        migrations.CreateModel(
            name='EdgeNodeDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('device_instance', models.ForeignKey(db_column='deviceInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceInstance')),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
            ],
            options={
                'db_table': 'EdgeNodeDevices',
            },
        ),
        migrations.AddField(
            model_name='edgenode',
            name='organization',
            field=models.ForeignKey(db_column='organizationId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Organization'),
        ),
        migrations.AddField(
            model_name='edgenode',
            name='projects',
            field=models.ManyToManyField(through='recon_db_manager.ProjectEdgeNode', to='recon_db_manager.Project'),
        ),
        migrations.AddField(
            model_name='ecosystemsedgenode',
            name='edge_node',
            field=models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode'),
        ),
        migrations.AddField(
            model_name='ecosystem',
            name='organization',
            field=models.ForeignKey(db_column='organizationId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Organization'),
        ),
        migrations.CreateModel(
            name='DockerModelFeatureModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('docker_model', models.ForeignKey(db_column='dockerModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DockerModel')),
                ('feature_model', models.ForeignKey(db_column='featureModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FeatureModel')),
            ],
            options={
                'db_table': 'DockerModelFeatureModel',
            },
        ),
        migrations.CreateModel(
            name='DockerModelDeviceClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('device_class', models.ForeignKey(db_column='deviceClassId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceClass')),
                ('docker_model', models.ForeignKey(db_column='dockerModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DockerModel')),
            ],
            options={
                'db_table': 'DockerModelDeviceClasses',
            },
        ),
        migrations.AddField(
            model_name='dockermodel',
            name='feature_models',
            field=models.ManyToManyField(through='recon_db_manager.DockerModelFeatureModel', to='recon_db_manager.FeatureModel'),
        ),
        migrations.AddField(
            model_name='dockerinstance',
            name='docker_model',
            field=models.ForeignKey(db_column='dockerModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DockerModel'),
        ),
        migrations.AddField(
            model_name='deviceinstance',
            name='edge_nodes',
            field=models.ManyToManyField(through='recon_db_manager.EdgeNodeDevice', to='recon_db_manager.EdgeNode'),
        ),
        migrations.AddField(
            model_name='deviceclass',
            name='device_parameter',
            field=models.ForeignKey(db_column='deviceParameterId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceParameter'),
        ),
        migrations.AddField(
            model_name='deviceclass',
            name='docker_models',
            field=models.ManyToManyField(through='recon_db_manager.DockerModelDeviceClass', to='recon_db_manager.DockerModel'),
        ),
        migrations.CreateModel(
            name='DetectionsSummary',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('observation_date', models.DateField(blank=True, db_column='observationDate', null=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
            ],
            options={
                'db_table': 'DetectionsSummary',
            },
        ),
        migrations.CreateModel(
            name='DetectedObjects',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('object_type', models.CharField(blank=True, db_column='objectType', max_length=3, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='parametersJSON', null=True)),
                ('edge_node', models.ForeignKey(db_column='edgeNodeId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.EdgeNode')),
                ('file', models.ForeignKey(db_column='fileId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FileStorage')),
            ],
            options={
                'db_table': 'DetectedObjects',
            },
        ),
        migrations.AddField(
            model_name='augmentationinstruction',
            name='frame_dataset',
            field=models.ForeignKey(db_column='frameDatasetId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.FrameDataset'),
        ),
        migrations.AddField(
            model_name='augmentationinstruction',
            name='project',
            field=models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project'),
        ),
        migrations.AddField(
            model_name='algorithmmodel',
            name='architecture',
            field=models.ForeignKey(db_column='architectureId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Architecture'),
        ),
        migrations.AddField(
            model_name='algorithmmodel',
            name='feature_models',
            field=models.ManyToManyField(through='recon_db_manager.FeatureModelAlgorithm', to='recon_db_manager.FeatureModel'),
        ),
        migrations.AddField(
            model_name='algorithmmodel',
            name='init_weight',
            field=models.ForeignKey(db_column='initWeights', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Weight'),
        ),
        migrations.CreateModel(
            name='AlgorithmInstanceTrainingInst',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_instance', models.ForeignKey(db_column='algorithmInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmInstance')),
                ('training_instruction', models.ForeignKey(db_column='trainingInstructionId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.TrainingInstruction')),
            ],
            options={
                'db_table': 'AlgorithmInstanceTrainingInst',
            },
        ),
        migrations.AddField(
            model_name='algorithminstanceobjectmodel',
            name='object_model',
            field=models.ForeignKey(db_column='objectModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.ObjectModel'),
        ),
        migrations.CreateModel(
            name='AlgorithmInstanceDeployedDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_instance', models.ForeignKey(db_column='algorithmInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmInstance')),
                ('deployed_device_instance', models.ForeignKey(db_column='deployedDeviceInstanceId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.DeviceInstance')),
            ],
            options={
                'db_table': 'AlgorithmInstanceDeployedDevices',
            },
        ),
        migrations.AddField(
            model_name='algorithminstance',
            name='algorithm_model',
            field=models.ForeignKey(db_column='algorithmModelId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.AlgorithmModel'),
        ),
        migrations.AddField(
            model_name='algorithminstance',
            name='device_instances',
            field=models.ManyToManyField(through='recon_db_manager.AlgorithmInstanceDeployedDevice', to='recon_db_manager.DeviceInstance'),
        ),
        migrations.AddField(
            model_name='algorithminstance',
            name='feature_instances',
            field=models.ManyToManyField(through='recon_db_manager.FeatureInstanceAlgorithm', to='recon_db_manager.FeatureInstance'),
        ),
        migrations.AddField(
            model_name='algorithminstance',
            name='project',
            field=models.ForeignKey(db_column='projectId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Project'),
        ),
        migrations.AddField(
            model_name='algorithminstance',
            name='training_instructions',
            field=models.ManyToManyField(through='recon_db_manager.AlgorithmInstanceTrainingInst', to='recon_db_manager.TrainingInstruction'),
        ),
        migrations.AddField(
            model_name='algorithminstance',
            name='weight',
            field=models.ForeignKey(db_column='weightId', on_delete=django.db.models.deletion.PROTECT, to='recon_db_manager.Weight'),
        ),
    ]
